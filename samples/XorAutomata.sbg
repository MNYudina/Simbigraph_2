<?xml version="1.0"?><Project TYPE="2D Lattices"><Size><![CDATA[50]]></Size><GridType><![CDATA[Square]]></GridType><Simulation><![CDATA[import java.awt.Color;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.collections15.Factory;

import simbigraph.core.Context;
import simbigraph.core.Simulation;
import simbigraph.engine.SimState;
import simbigraph.grid.model.CellAccessor;
import simbigraph.grid.model.Grid;
import simbigraph.grid.model.GridDimensions;
import simbigraph.grid.model.GridPoint;
import simbigraph.grid.model.MooreQuery;
import simbigraph.grid.model.MultiOccupancyCellAccessor;


public class Simulation0 extends Simulation {
	class CA {
		
		public int state;
		public int oldState;

		/**
		 * Maintain the history of the state for one time interval
		 */
		public void setOldState(){
			oldState = state;
		}
		
		public void step(){
			Grid grid = Context.getGrid();
			
			// Query the von Neuman neighborhood
			MooreQuery<CA> query = new MooreQuery(grid,this);
			Iterator<CA> iter = query.query().iterator();
					
			// Get the states of the four neighbors;
			int a =	iter.next().getOldState();
			int b =	iter.next().getOldState();
			int c =	iter.next().getOldState();
			int d =	iter.next().getOldState();
			
			// set the state according to the parity rule.
			setState(a^b^c^d);
		}
		
		public int getState() {
			return state;
		}	
		public int getOldState() {
			return oldState;
		}
		public void setOldState(int oldState) {
			this.oldState = oldState;
		}

		public void setState(int state) {
			this.state = state;
			
			
		}
	}
	CellAccessor<Object, Map<GridPoint, Object>> accessor = new MultiOccupancyCellAccessor<Object>();

	private void doStructure() {
		Grid grid = Context.getGrid();
		GridDimensions dim = grid.getDimensions();
		
		for (int i = 0; i < dim.getWidth(); i++)
			for (int j = 0; j < dim.getHeight(); j++) {
				
			
						CA ca = new CA();
						grid.moveTo(ca, i, j);
		}
		int seedWidth=dim.getHeight()/5;
		// "Seed" the the center CA.
		for (int j=dim.getHeight()/2-seedWidth/2; j<dim.getHeight()/2+seedWidth/2; j++){
			for (int i=dim.getWidth()/2-seedWidth/2; i<dim.getWidth()/2+seedWidth/2; i++){
				CA ca = (CA) grid.getObjectAt(i,j);
				ca.setState(1);
			}
		}
		
		
		return;
	}

	// -----------------------------------------------------------------------


	public void step(SimState state) {
		//
		Grid grid = Context.getGrid();
		GridDimensions dim = grid.getDimensions();
		for (int i = 0; i < dim.getDimension(0); i++) {
			for (int j = 0; j < dim.getDimension(1); j++) {
				CA ca = (CA) grid.getObjectAt(i,j);
				ca.setOldState();
			}
		}
		//
		for (int i = 0; i < dim.getDimension(0); i++) {
			for (int j = 0; j < dim.getDimension(1); j++) {
				CA ca = (CA) grid.getObjectAt(i,j);
				ca.step();
			}
		}
		
	}

	public void start() {
		super.start();
		schedule.scheduleRepeating(this);	

		
	}

	@Override
	public void init(Object env) {
		doStructure();
	}

	@Override
	public Color getAgentColor(Object obj) {
		Color col = Color.GREEN;
		if (obj instanceof CA)
			if (((CA)obj).state==1)return Color.BLACK;
			else return Color.WHITE;
	
		return col;
	}

	@Override
	public Factory getAgentFactory() {
		return null;
	}

}]]></Simulation></Project>